#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

int lines_num(FILE *file);

int printIndex(char *str, char *s);

int main(void)
{
    char *modes[3] = { "animals.txt", "englit.txt"/*, "music.txt", "science.txt"*/, "hardwords.txt" };
    /*for (int i = 0, length = sizeof(modes) / 8; i < length; i++) {
        printf("%s\n", modes[i]);
    }*/

    /*(const char *text =
    "Hello party people \n"
    "does this indent \n"
    "We shall see \n";

    printf("%s\n", text);*/

    printf("Welcome to hangman. Choose your category: \n");
    printf("Animals\nLiterature\nDifficult\n");

    char category[20];
    scanf("%s", category);

    FILE *inptr;

    if (strncmp(category, "Ani", 7) == 0) {
        inptr = fopen("animals.txt", "r");
    } else if (strncmp(category, "Lit", 18) == 0) {
        inptr = fopen("englit.txt", "r");
    } else if (strncmp(category, "Diff", 15) == 0) {
        inptr = fopen("hardwords.txt", "r");
    } else {
        fprintf(stderr, "Error. Please choose one of the categories listed.");
        return 1;
    }

    int number_of_lines = lines_num(inptr);

    if (inptr == NULL)
    {
        fprintf(stderr, "There was an error.\n");
        return 2;
    }

    char temp_word[80];
    char word[50];

    srand(time(0));
    int rand_num = rand() % number_of_lines;

    fseek(inptr, 0, SEEK_SET);

    for (int i = 0; i <= number_of_lines + 1; i++)
    {
        fseek(inptr, 0, SEEK_CUR);

        if (i == rand_num)
        {
            strcpy(word, temp_word);
            break;
        }

        fgets(temp_word, 70, inptr);

    }

    printf("%s", word);
    char guess_word[70] = "";

    for (int j = 0, n = strlen(word); j < n; j++)
    {
        if (isalpha(word[j]))
        {
            strcat(guess_word, "_");
        }
        else
        {
            strcat(guess_word, " ");
        }
    }

    printf("%s\n", guess_word);

    char input[2];
    printf("Enter a letter to guess: (case-insensitive)\n");
    scanf("%s", input);

    /*char str[] = "Rebecca";
    char key[2];
    printf("Choose a letter: \n");
    scanf("%s", key);*/
    //char key[] = "a";
    char * pch;
    printf ("Vowels in '%s': \n", word);
    pch = strcasestr(word, input);
    while (pch != NULL)
    {
        printf ("%c " , *pch);
        printf ("found at index %ld\n", pch-word);
        pch = strcasestr(pch+1,input);
    }

    //printf("%s\n", word[2]);

    for (int i = 0; i < strlen(word); i++)
    {
            if (word[i] == input[0])
            {
                guess_word[i] = word[i];
                printf("%s\n", guess_word);
            }
    }
    //char guess_letter[2] = input[0];

    //printIndex(guess_word, &guess_letter);*/
    //putchar(guess);
    //printf("%c\n", guess);
    /*char * count;
    count=strchr(word,'a');
    while (count!=NULL)
    {
        printf ("found at %ld\n",count-word+1);
        count=strchr(word+1,'a');
    }*/
    /*for (int i = 0; i < strlen(word); i++)
    {
        printf("Found guess at %ld\n", count-word+1);
        count = strchr(word+1, 'a');
    }*/

    //char str[] = "This is a sample string";
    /*char * count;
    printf ("Looking for the %c character in \"%s\"...\n", guess_letter, word);
    count = strchr(word, guess_letter);
    //printf("%c", (char)guess);
    while (count != NULL)
    {
        //printf("%c\n", (char)guess);
        printf ("found at %ld\n", count-word+1);
        count = strchr(count+1, guess_letter);
    }

    vector<size_t>*/

    /*for (int k = 0, o = strlen(word); k < o; k++)
    {
        if (isalpha(word[k]))
        {
            if (strcmp(guess, &word[k]) == 0)
            {
                guess_word[k] = word[k];
            }
            else {
                continue;
            }
        } else {
            printf("");
        }
    }*/

    //printf("%s\n", guess_word);

    //fclose(inptr);
    return 0;
}

int lines_num(FILE *file) {
    int ch;
    int number_of_lines = 0;

    while (EOF != (ch=getc(file)))
    {
        if ('\n' == ch)
        {
            ++number_of_lines;
        }
    }

    return number_of_lines;
}

/*int printIndex(char *str, char *s)
{
    for (int i = 0; i < strlen(str); i++) {
        if (str.substr(i, strlen(s)) == s) {
            printf("%i\n", i);
        }
    }
    return 0;
}*/
